configurations {
    publish
    api.extendsFrom publish
}

apply plugin: 'maven-publish'

def pkgGroupId = PKG_GROUP_ID
def pkgArtifactId = PKG_ARTIFACT_ID
def pkgVersion = PKG_VERSION

group = pkgGroupId
version = pkgVersion

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            maven(MavenPublication) {
                artifact bundleReleaseAar
                artifact androidSourcesJar

                // You can then customize attributes of the publication as shown below.
                groupId pkgGroupId
                artifactId pkgArtifactId
                version pkgVersion

                pom.withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')

                    ext.addDependency = { String configurationName, Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                            // ignore invalid dependencies
                            return
                        }

                        final dependencyNode = dependenciesNode.appendNode('dependency')

                        if (dep instanceof ProjectDependency && 'publish' == configurationName) {
                            def targetProject = ((ProjectDependency) dep).dependencyProject
                            dependencyNode.appendNode('groupId', targetProject.group)
                            dependencyNode.appendNode('artifactId', targetProject.name)
                            dependencyNode.appendNode('version', targetProject.version)
                            dependencyNode.appendNode('scope', scope)
                        } else {
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                            dependencyNode.appendNode('scope', scope)
                        }

                        if (!dep.transitive) {
                            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }

                    HashSet<Dependency> dependencies = new HashSet<>()

                    configurations.publish.getAllDependencies().each { dep -> addDependency("publish", dep, "compile") }

                    dependencies.addAll(configurations.api.getAllDependencies())
                    dependencies.removeAll(configurations.publish.getAllDependencies())
                    dependencies.each { dep -> addDependency("api", dep, "compile") }

                    dependencies.addAll(configurations.implementation.getAllDependencies())
                    dependencies.removeAll(configurations.api.getAllDependencies())
                    dependencies.each { dep -> addDependency("implementation", dep, "runtime") }
                }
            }
        }
    }
}
